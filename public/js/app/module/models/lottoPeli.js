// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    return Backbone.Model.extend({
      defaults: {
        name: '',
        currentWeek: 0,
        rowsPlayed: 0,
        rowsPerWeek: 10,
        rowPrice: 1,
        gameRunning: false,
        sleepTime: 300,
        minSleepTime: 50,
        maxSleepTime: 1500,
        moneyWon: 0
      },
      initialize: function() {
        var startDate;
        startDate = new Date;
        return this.set({
          startDate: startDate,
          startDateString: this.getFinnishDateString(startDate),
          currentDate: startDate,
          currentDateString: this.getFinnishDateString(startDate),
          winnings: [["7 oikein", 15380937, 2000000, 0], ["6+1 oikein", 1098638, 20000, 0], ["5+2 oikein", 732426, 3000, 0], ["6 oikein", 73243, 1500, 0], ["5+1 oikein", 12207, 115, 0], ["4+2 oikein", 14649, 80, 0], ["5 oikein", 1684, 45, 0], ["4+1 oikein", 505, 17, 0], ["4 oikein", 108, 9, 0], ["3+2 oikein", 1010, 5, 0], ["3+1 oikein", 54, 1, 0]]
        });
      },
      validate: function(attribs) {
        if (isNaN(Number(attribs.rowsPerWeek))) {
          return "Rivien määrän on oltava luku";
        }
        if (attribs.rowsPerWeek < 0) {
          return "Rivien määrän on oltava positiivinen";
        }
        if (attribs.rowsPerWeek > 100000) {
          return "Rivien määrän on oltava korkeintaan 100000";
        }
        if (attribs.sleepTime > this.maxSleepTime) {
          return "Sleeptime too big";
        }
      },
      getFinnishDateString: function(date) {
        return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
      },
      start: function() {
        return this.set("gameRunning", true);
      },
      stop: function() {
        return this.set("gameRunning", false);
      },
      playWeek: function() {
        this.set({
          currentWeek: this.get("currentWeek") + 1,
          currentDate: new Date(this.get("currentDate").getTime() + (7 * 24 * 60 * 60 * 1000)),
          currentDateString: this.getFinnishDateString(this.get("currentDate")),
          rowsPlayed: this.get("rowsPlayed") + this.get("rowsPerWeek")
        });
        return this.raffle();
      },
      checkForLotteryWins: function(rows, probability) {
        var prod, randomNumber, target, wins, _i;
        wins = 0;
        if (rows < 50) {
          for (_i = 1; 1 <= rows ? _i <= rows : _i >= rows; 1 <= rows ? _i++ : _i--) {
            randomNumber = Math.floor(Math.random() * probability);
            if (randomNumber === 0) {
              wins = wins + 1;
            }
          }
        } else {
          prod = 1;
          target = Math.exp(-rows / probability);
          while (true) {
            prod = prod * Math.random();
            if (prod < target) {
              break;
            }
            wins = wins + 1;
          }
        }
        return wins;
      },
      incrementAttribute: function(attribute, increment) {
        return this.set(attribute, this.get(attribute) + increment);
      },
      raffle: function() {
        var rows, winning, wins, _i, _len, _ref, _results;
        rows = this.get("rowsPerWeek");
        _ref = this.get("winnings");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          winning = _ref[_i];
          wins = this.checkForLotteryWins(rows, winning[1]);
          this.set("moneyWon", this.get("moneyWon") + (winning[2] * wins));
          winning[3] = winning[3] + wins;
          rows = rows - wins;
          if (rows === 0) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      isRunning: function() {
        return this.get("gameRunning");
      }
    });
  });

}).call(this);
